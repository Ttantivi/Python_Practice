Python Cheat sheet

List Slicing:

list[3:5], only prints 3 and 4.
[start: end], [inclusive, exclusive]

list[:5] start to 5
list[5:] 5 to end

Delete from list:
del(list[index])

Assigning new list, and not just reference
x = [1, 2, 3]
y = list(x)


Methods
this is the .stuff in a python object
fam.index("stuff")

Importing packages
import numpy as np
from numpy import array
import matplotlib.pyplot as plt

bmi > 23 will give a list of true and falses
bmi[bmi > 23] give you stuff that's > 23

Attributes
array.shape # notice how there isn't any (), since it is an attribute.


Plots
import matplotlib.pyplot as plt
plt.plot(year, pop)
plt.xlabel('')
plt.ylabel('')
plt.title('')
plt.grid(True)

plt.show()

plt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c = col,
alpha = 0.8)


Dictionaires
world = {"afghanistan":30.55, "albania":2.77}
Key value pairs

adding new stuff: dict['key'] = value
del(world['key'])

check if something is in there
'value' in dict

Pandas
df = pd.read_csv('path',  index_col = 0 )
pd.DataFrame(dict)
cars.index = row_labels

brics['country'] # this will return a series
brics[['country']] # this will return a one column data frame

loc # label based
iloc # integer position-based

brics.loc[['RU']] # get row based on label
brics.iloc[[1]] # get row based on index

brics.iloc[[:, [0,1]] # get all rows and columns 0 and 1

filter for row then print column
cars.loc[['RU, 'MOR'], ['Country', 'drives_right']]

subsetting dataframe
brics[brics['area'] > 8]
brics[np.logical_and(brics['area'] > 8), brics['area' < 10]]

Numpy logical
np.logical_and()
np.logical_or()
np.logical_not()


if condition:
     expression
elif x > y:
     expression
else:

while condition:
     expression

for i in array:
     print(i)

for index, height in enumerate(fam):
     index # this is an index that keeps count
     height # this is the actual values of the array

# printing for dictionary
for key, value in dict.items():
     key # key of dict
     value # value of dict

# printing over all elements of np array
for val in np.nditer(array):
	print val

-------------------------------

# now for pandas data frame
# iterate over rows
for lab, row in df.iterrows():
     df.loc[lab, 'name_length'] = len(row['column'])

df['name_length] = df['country'].apply(len)
cars['COUNTRY'] = cars['country'].apply(str.upper)

# summary stuff
df.info() # columns names, type, number of missing values.
df.shape # rows and columns
df.desbribe() # summary statistics
df.values # data values of in 2 dimensional numpy arrays
df.columns # colum nnames
df.index # rows

# Sorting
df.sort_values("column_name", ascending=True)
df.sort_values(["column_name 1", "column_name 2"], ascending=[True, True])

# Subsetting columns
df["column_name"]
df[['column 1', 'column 2']]

# subsetting rows
df[df['height'] > 50]
df[df['breed'] == 'labs']

-------------------------------
# random numbers stuff
np.random.seed(123)
np.random.rand()
np.random.ranint(0,2) # randomly between 0 or 1
np.random.rand()


